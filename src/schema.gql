# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Image {
  uid: String
  src: String!
  alt: String!
}

type Seo {
  title: String!
  href: String!
  description: String!
  image: Image!
}

type UpdateDate {
  createdAt: DateTime!
  register: [Register!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Register {
  uid: String
  change: String
  updatedAt: DateTime!
}

type PageDataDto {
  count: Float!
  limit: Float!
  offset: Float!
}

type Product {
  _id: ID!
  article: Article!
  site: String!
  type: String!
  page: String!
  updateDate: UpdateDate!
}

type Article {
  name: String!
  slug: String!
  mark: String!
  inStock: Float!
  price: Float!
  discountPrice: Float!
  description: String!
  featured: Featured!
  details: Detail
  specs: [SpecsProduct!]!
  tags: [TagsProduct!]!
  image: [Image!]
  seo: Seo!
}

type Featured {
  name: String!
  href: String!
}

type Detail {
  material: String!
  color: String!
  finishing: String!
  logo: String!
  accessories: String!
  dimensions: [String!]!
}

type TagsProduct {
  uid: String!
  text: String!
}

type SpecsProduct {
  uid: String!
  text: String!
}

type ListProductResponse {
  page: ProductConnection!
  pageData: PageDataDto
}

type ProductConnection {
  edges: [ProductEdge!]
  pageInfo: ProductPageInfo
}

type ProductEdge {
  cursor: String
  node: Product
}

type ProductPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Blog {
  _id: ID!
  data: DataBlog!
  site: String!
  page: String!
  updateDate: UpdateDate!
}

type DataBlog {
  title: String!
  slug: String!
  content: String!
  category: String!
  description: String!
  meta: String!
  tags: [Tags!]!
  author: String!
  thumbnail: Image!
  seo: Seo!
}

type Tags {
  uid: String!
  text: String!
}

type ListBlogResponse {
  page: BlogConnection!
  pageData: PageDataDto
}

type BlogConnection {
  edges: [BlogEdge!]
  pageInfo: BlogPageInfo
}

type BlogEdge {
  cursor: String
  node: Blog
}

type BlogPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Page {
  _id: ID!
  data: DataPage!
  slug: String!
  section: [ComponentPage!]!
  updateDate: UpdateDate!
  page: [Page]
  product: [Product]
  blog: [Blog!]
}

type DataPage {
  type: String!
  icon: Image!
  seo: Seo!
}

type ComponentPage {
  uid: String!
  component: String!
  html: String!
}

type Page0 {
  _id: ID!
  data: DataPage!
  slug: String!
  section: [ComponentPage!]!
  updateDate: UpdateDate!
  page: [Page1!]!
  product: [Product!]!
  blog: [Blog!]!
}

type Page1 {
  _id: ID!
  data: DataPage!
  slug: String!
  section: [ComponentPage!]!
  updateDate: UpdateDate!
  page: [Page2!]!
  product: [Product!]!
  blog: [Blog!]!
}

type Page2 {
  _id: ID!
  data: DataPage!
  slug: String!
  section: [ComponentPage!]!
  updateDate: UpdateDate!
  page: [Page3!]!
  product: [Product!]!
  blog: [Blog!]!
}

type Page3 {
  _id: ID!
  data: DataPage!
  slug: String!
  section: [ComponentPage!]!
  updateDate: UpdateDate!
  page: [Page4!]!
  product: [Product!]!
  blog: [Blog!]!
}

type Page4 {
  _id: ID!
  data: DataPage!
  slug: String!
  section: [ComponentPage!]!
  updateDate: UpdateDate!
  page: [Page5!]!
  product: [Product]
  blog: [Blog!]
}

type Page5 {
  _id: ID!
  data: DataPage!
  slug: String!
  section: [ComponentPage!]!
  updateDate: UpdateDate!
  page: [Page6!]!
  product: [Product]
  blog: [Blog!]
}

type Page6 {
  _id: ID!
  data: DataPage!
  slug: String!
  section: [ComponentPage!]!
  updateDate: UpdateDate!
  page: [Page]
  product: [Product]
  blog: [Blog!]
}

type ListPageResponse {
  page: PageConnection!
  pageData: PageDataDto
}

type PageConnection {
  edges: [PageEdge!]
  pageInfo: PagePageInfo
}

type PageEdge {
  cursor: String
  node: Page
}

type PagePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Site {
  _id: ID!
  data: Data!
  client: String!
  url: String!
  page: [Page0!]!
  updateDate: UpdateDate!
}

type Data {
  name: String!
  numberPhone: Float
  address: String
  type: String!
  users: [String!]!
  location: String
  dataBase: [DataBase!]!
  description: String!
  domain: Domain!
  image: Image
  logo: Image
  icon: Image
}

type DataBase {
  uid: String!
  type: String!
}

type Domain {
  name: String!
  dlt: String!
}

type ListSiteResponse {
  page: SiteConnection!
  pageData: PageDataDto
}

type SiteConnection {
  edges: [SiteEdge!]
  pageInfo: SitePageInfo
}

type SiteEdge {
  cursor: String
  node: Site
}

type SitePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type User {
  _id: ID!
  data: DataUser!
  email: String!
  password: String!
  site: String!
  updateDate: UpdateDateUser!
}

type UpdateDateUser {
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DataUser {
  name: String!
  role: String!
  image: String!
  status: Boolean!
  google: Boolean!
}

type Comment {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Beverage {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Query {
  findSite(_id: ID!): Site!
  findSites: [Site!]!
  sitesByPagination(input: ListInput!): [Site!]!
  listSitesWithCursor(args: ConnectionArgs!): ListSiteResponse!
  getProduct(_id: ID!, type: String!): Product!
  getProducts(type: String!): [Product!]!
  getAllProducts: [Product!]!
  getProductsClothing: [Product!]!
  getProductsFurniture: [Product!]!
  getProductsBySite(site: String!, type: String!): [Product!]!
  getProductsByPage(page: String!, type: String!): [Product!]!
  listProductWithCursor(args: ConnectionArgs!, type: String!): ListProductResponse!
  findPage0(_id: ID!): Page0!
  findPage0BySite(site: String!, slug: String!): Page0!
  findPages0BySite(site: String!): [Page0!]!
  findPages0: [Page0!]!
  listPages0WithCursor(args: ConnectionArgs!): ListBlogResponse!
  findPage1(_id: ID!): Page1!
  findPage1BySite(site: String!, slug: String!): Page1!
  findPages1BySite(site: String!): [Page1!]!
  findPages1: [Page1!]!
  listPages1WithCursor(args: ConnectionArgs!): ListPageResponse!
  findPage2(_id: ID!): Page2!
  findPage2BySite(site: String!, slug: String!): Page2!
  findPages2BySite(site: String!): [Page2!]!
  findPages2: [Page2!]!
  listPages2WithCursor(args: ConnectionArgs!): ListPageResponse!
  findPage3(_id: ID!): Page3!
  findPage3BySite(site: String!, slug: String!): Page3!
  findPages3BySite(site: String!): [Page3!]!
  findPages3: [Page3!]!
  listPages3WithCursor(args: ConnectionArgs!): ListPageResponse!
  findBlog(_id: ID!): Blog!
  findBlogs: [Blog!]!
  getUser(_id: ID!): User!
  getUserByEmail(email: String!): User!
  getUsers: [User!]!
  comment(id: Int!): Comment!
  beverages: [Beverage!]!
  beverage(id: Int!): Beverage!
}

input ListInput {
  """classical limit"""
  limit: Float!

  """classical offset"""
  offset: Float!
}

input ConnectionArgs {
  """Paginate before opaque cursor"""
  before: String

  """Paginate after opaque cursor"""
  after: String

  """Paginate first"""
  first: Float

  """Paginate last"""
  last: Float
}

type Mutation {
  createSite(input: CreateSite!): Site!
  updateSite(_id: ID!, input: UpdateSite!): Site!
  updateDataBase(_id: ID!, input: [UpdateDataBase!]!): Site!
  deleteSite(_id: ID!): String!
  deleteSites: String!
  createProduct(input: CreateProduct!, type: String!): Product!
  updateProduct(_id: ID!, input: UpdateProduct!, type: String!): Product!
  deleteProduct(_id: ID!, type: String!): String!
  deleteProducts(site: String!, type: String!): String!
  createPage0(input: CreatePage!): Page0!
  updatePage0(_id: ID!, input: UpdatePage!): Page0!
  deletePage0(_id: ID!): String!
  createPage1(input: CreatePage!): Page1!
  updatePage1(_id: ID!, input: UpdatePage!): Page1!
  deletePage1(_id: ID!): String!
  createPage2(input: CreatePage!): Page2!
  updatePage2(_id: ID!, input: UpdatePage!): Page2!
  deletePage2(_id: ID!): String!
  createPage3(input: CreatePage!): Page3!
  updatePage3(_id: ID!, input: UpdatePage!): Page3!
  deletePage3(_id: ID!): String!
  createPage4(input: CreatePage!): Page4!
  updatePage4(_id: ID!, input: UpdatePage!): Page4!
  deletePage4(_id: ID!): String!
  createPage5(input: CreatePage!): Page5!
  updatePage5(_id: ID!, input: UpdatePage!): Page5!
  deletePage5(_id: ID!): String!
  createBlog(input: CreateBlog!): Blog!
  updateBlog(_id: ID!, input: UpdateBlog!): Blog!
  deleteBlog(_id: ID!): String!
  createUser(input: CreateUserInput!): User!
  updateUser(_id: ID!, input: UpdateUserInput!): User!
  deleteUser(_id: ID!): String!
  deleteUsers(site: String!): String!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: Int!): Comment!
  createBeverage(createBeverageInput: CreateBeverageInput!): Beverage!
  updateBeverage(updateBeverageInput: UpdateBeverageInput!): Beverage!
  removeBeverage(id: Int!): Beverage!
}

input CreateSite {
  name: String!
  domain: String!
  description: String!
  type: String!
  client: String!
  change: String!
  uid: String!
}

input UpdateSite {
  name: String!
  domain: String!
  description: String!
  type: String!
  change: String!
  uid: String!
}

input UpdateDataBase {
  type: String!
}

input CreateProduct {
  name: String!
  mark: String!
  description: String!
  featured: String!
  inStock: Float!
  price: Float!
  discountPrice: Float!
  site: String!
  page: String!
}

input UpdateProduct {
  name: String!
  mark: String!
  description: String!
  featured: String!
  inStock: Float!
  price: Float!
  discountPrice: Float!
}

input CreatePage {
  title: String!
  description: String!
  icon: String
  src: String!
  alt: String!
  type: String!
  page: String!
  site: String!
}

input UpdatePage {
  title: String!
  description: String!
  icon: String
  src: String!
  alt: String!
  type: String!
}

input CreateBlog {
  title: String!
  content: String!
  meta: String!
  tags: [String!]!
  author: String!
  description: String!
  site: String!
  page: String!
  category: String!
  src: String!
  alt: String!
}

input UpdateBlog {
  title: String!
  content: String!
  meta: String!
  tags: [String!]!
  author: String!
  description: String!
  category: String!
  src: String!
  alt: String!
}

input CreateUserInput {
  name: String!
  site: String!
  image: String!
  email: String!
  password: String!
  role: String!
}

input UpdateUserInput {
  name: String
  site: String
  image: String
  email: String
  password: String
  role: String
}

input CreateCommentInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateCommentInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateBeverageInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateBeverageInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

type Subscription {
  blogAdded: Blog!
}